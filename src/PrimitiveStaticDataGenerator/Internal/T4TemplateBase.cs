using System;
using System.Text;
using System.Globalization;

namespace PrimitiveStaticDataGenerator.Internal
{
    internal abstract class T4TemplateBase
    {
        protected StringBuilder GenerationEnvironment { get; }
        protected ToStringInstanceHelper ToStringHelper { get; }

        internal T4TemplateBase()
        {
            ToStringHelper = new();
            GenerationEnvironment = new StringBuilder(
@"// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by PrimitiveStaticDataGenerator.
// </auto-generated>
// ------------------------------------------------------------------------------
");
        }
        public abstract string TransformText();

        protected void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend)) return;

            GenerationEnvironment.Append(textToAppend);
        }

        internal sealed class ToStringInstanceHelper
        {

            internal string ToStringWithCulture(string value)
            {
                if (value is null) Throw(new ArgumentNullException(nameof(value)));

                return value!;
            }

            internal string ToStringWithCulture<T>(T value)
            {
                if (value is null) Throw(new ArgumentNullException(nameof(value)));

                if (value is IFormattable formattable)
                {
                    return formattable.ToString(null, CultureInfo.InvariantCulture);
                }
                else if (value is IConvertible convertible)
                {
                    return convertible.ToString(CultureInfo.InvariantCulture);
                }
                else
                {
                    return value!.ToString();
                }
            }

            private static void Throw(Exception exception) => throw exception;

        }
    }
}