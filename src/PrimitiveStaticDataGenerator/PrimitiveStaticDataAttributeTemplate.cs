// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 16.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace PrimitiveStaticDataGenerator
{
    using PrimitiveStaticDataGenerator.Internal;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal partial class PrimitiveStaticDataAttributeTemplate : T4TemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System;\r\n\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write("\r\n{\r\n    [AttributeUsage(AttributeTargets.ReturnValue, Inherited = false, AllowMu" +
                    "ltiple = false)]\r\n    internal sealed class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" : Attribute\r\n    {\r\n");
 foreach (var type in new string[] { "bool", "byte", "double", "float", "int", "long", "sbyte", "short", "uint", "ulong", "ushort", "char", }) { 
            this.Write("        internal ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write("(params ");
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            this.Write("[] values) { }\r\n");
 } 
            this.Write("    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }

        private const string Namespace = "PrimitiveStaticDataGenerator";
        private const string TypeName = "PrimitiveStaticDataAttribute";
        internal const string TypeFullName = Namespace + "." + TypeName;

    }
}
